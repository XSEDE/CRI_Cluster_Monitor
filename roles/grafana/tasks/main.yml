---

 - name: install grafana packages
   yum: name=grafana state=installed

#- name: allow httpd to network connect  #Verify that grafana works without stuffs.  If not, check getsebool.
#   seboolean: name=httpd_can_network_connect state=yes persistent=yes

 - name: add grafana to firewalld services
   template: src=grafana.xml dest=/etc/firewalld/services/grafana.xml

 - name: reload firewalld
   command: firewall-cmd --reload

 - name: add grafana to external zone
   firewalld:
     zone: external
     service: "grafana"
     permanent: yes
     immediate: yes
     state: enabled

 - name: add datasource to Grafana
   template: src=datasource.yaml dest=/etc/grafana/provisioning/datasources/datasource.yaml

 - name: add dashboard config file to grafana
   template: src=dashboard.yaml dest=/etc/grafana/provisioning/dashboards/dashboard.yaml

 - name: create dashboads dir
   file: 
     state: directory
     path: /var/lib/grafana/dashboards
     owner: grafana
     group: grafana

 - name: add dashboard json to Grafana
   copy: src=dashboard.json dest=/var/lib/grafana/dashboards/dashboard.json

 - name: start service on headnode (grafana-server)
   service: name=grafana-server state=restarted enabled=yes

   # Why do we need to reboot the compute nodes for Grafana, if it just runs on headnode
   #  and grabs from Prometheus?
   # - name: get compute node names (wwsh)
   #   shell: wwsh node list | tail -n +3 | awk '{print $1}'
   #   register: node_name_list
   #
   # - name: reboot computes (wwsh)
   #   command: ssh {{ item }} "reboot"
   #   with_items:
   #     - "{{ node_name_list.stdout_lines }}"
   #   ignore_errors: yes #since you get a 'connection closed by remote host'
   #
   # - name: wait for nodes to reboot
   #   pause: prompt="Hit ENTER to continue once all compute nodes have rebooted with the new image!"
   #
# - name: get compute node names2 (wwsh)
#   shell: wwsh node list | tail -n +3 | awk '{print $1}'
#   register: node_name_list
#
# - name: start and enable service on computes (gmond)
#   command: ssh {{ item }} 'systemctl enable gmond && systemctl start gmond'
#   with_items:
#     - "{{ node_name_list.stdout_lines }}"
